@import "settings";
@import "compass/css3";
@import "compass/utilities";



// ADD YOUR OWN MIXINS AND HELPERS HERE
// DESCRIBE WHAT EACH DOES AND HOW TO USE THEM

/*********************
BORDER RADIUS
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include border-radius(4px 4px 0 0);
*/

@mixin border-radius($radius...) {
	// defining prefixes so we can use them in mixins below
	$prefixes:      ("-webkit-", "-moz-", "-ms-", "-o-",  "");
  @each $prefix in $prefixes {
    #{$prefix}border-radius: $radius;
  }

  border-radius: $radius;
}

/*********************
TRANISTION
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/

@mixin transition($transition...) {
	// defining prefixes so we can use them in mixins below
	$prefixes:      ("-webkit", "-moz", "-ms", "-o",  "");
  @each $prefix in $prefixes {
    #{$prefix}-transition: $transition;
  }

  transition: $transition;
}


/*********************
BOX SHADOWS
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include box-shadow(inset 0 0 4px rgba(0,0,0,0.22));
*/

@mixin box-shadow($shadow...) {
	// defining prefixes so we can use them in mixins below
	$prefixes:      ("-webkit", "-moz", "-ms", "-o",  "");
  @each $prefix in $prefixes {
    #{$prefix}-box-shadow: $shadow;
  }

  box-shadow: $shadow;
}


/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdue it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, top, bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

@mixin breakpoint($point) {
  @if $point == mobile {
    @media (min-width: em-font(480px)) { @content; }
  }
  @else if $point == tablet {
    @media (min-width: em-font(650px)) { @content; }
  }
  @else if $point == desktop {
    @media (min-width: em-font(960px))  { @content; }
  }
  @else if $point == large-desktop {
    @media (min-width: em-font(1200px))  { @content; }
  }
}

// List styles
// -------------------------------------------------------

// Mixins for list style types
@mixin unordered {
	 list-style-position: outside; 
	 list-style-type: disc;
}

@mixin unordered-inside {
	 list-style-position: inside; 
	 list-style-type: disc;
}

@mixin ordered {
	list-style-position: outside; 
	list-style-type: decimal;
}

@mixin ordered-inside {
	list-style-position: inside; 
	list-style-type: decimal;
}

@mixin nobullet {
	list-style-type: none;
}


// Advanced typography settings
// -------------------------------------------------------

// Get advanced with type if needed for ligatures etc...

@mixin advancedtype {
	//font-variant-ligatures: contextual;  				// Set the default for ligatures
	//-moz-font-feature-settings: "liga=1,dlig=1";    	// Ligature settings for mozilla
	font-kerning: normal; 								// Set the default for kerning
	//-webkit-font-smoothing: antialiased; 				// Improve (or in some cases royally screw with) safari's legibility somewhat
	//font-synthesis: none; 							// Don't allow the font to create sythetic bold/italic
	//text-rendering: optimizeLegibility; 				// Improve kerning pairs. Webkit gets funny with this sometimes
}


// Retina images. 
// Use with care - http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss
// -------------------------------------------------------

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}


@mixin tilt {
  @include transition(all .5s ease-in-out);

  -moz-transform: scale(1) rotate(3deg) translateX(0px) translateY(0px) skewX(0deg) skewY(0deg);
    -webkit-transform: scale(1) rotate(3deg) translateX(0px) translateY(0px) skewX(0deg) skewY(0deg);
        -o-transform: scale(1) rotate(3deg) translateX(0px) translateY(0px) skewX(0deg) skewY(0deg);
        -ms-transform: scale(1) rotate(3deg) translateX(0px) translateY(0px) skewX(0deg) skewY(0deg);
        transform: scale(1) rotate(3deg) translateX(0px) translateY(0px) skewX(0deg) skewY(0deg);

}

@mixin swing {
  @include transition(all 1s ease-in-out);
    -moz-animation: 3s ease-in-out 0s normal none swing;
    -moz-transform-origin: center top;
    -moz-animation-duration: 6s;
    // -webkit-animation:swing 3s ease-in-out;
    // -webkit-transform-origin:top;
    // -webkit-animation-duration: 6s;
}

@-moz-keyframes swing{
    0%{-moz-transform:rotate(3deg)}
    25%{-moz-transform:rotate(-3deg)}
    50%{-moz-transform:rotate(3deg)}
    75%{-moz-transform:rotate(-3deg)}
    100%{-moz-transform:rotate(3deg)}
}
// @-webkit-keyframes swing{
//     0%{-webkit-transform:rotate(3deg)}
//     25%{-webkit-transform:rotate(-3deg)}
//     50%{-webkit-transform:rotate(3deg)}
//     75%{-webkit-transform:rotate(-3deg)}
//     100%{-webkit-transform:rotate(3deg)}
// }